// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogs.sql

package sqlc

import (
	"context"
	"database/sql"
)

const listBlogs = `-- name: ListBlogs :many
SELECT blogs.id,
    blogs.title,
    -- blogs.desc,
    blogs.user_id,
    blogs.created_at,
    blogs.updated_at,
    users.uu, users.uu, users.uu, users.uu, users.uu, users.uu, users.uu, users.uu uu
FROM blogs
    LEFT JOIN users ON users.id = blogs.user_id
ORDER BY blogs.id
LIMIT ? OFFSET ?
`

type ListBlogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListBlogsRow struct {
	ID        int          `json:"id"`
	Title     string       `json:"title"`
	UserID    int          `json:"userId"`
	CreatedAt sql.NullTime `json:"createdAt"`
	UpdatedAt sql.NullTime `json:"updatedAt"`
	User      User         `json:"user"`
}

func (q *Queries) ListBlogs(ctx context.Context, arg ListBlogsParams) ([]ListBlogsRow, error) {
	rows, err := q.db.QueryContext(ctx, listBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBlogsRow{}
	for rows.Next() {
		var i ListBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User.ID,
			&i.User.Nickname,
			&i.User.Password,
			&i.User.Gender,
			&i.User.Age,
			&i.User.Avatar,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
